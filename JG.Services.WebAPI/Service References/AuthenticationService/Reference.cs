//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JG.Services.WebAPI.AuthenticationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthenticationResult", Namespace="http://schemas.datacontract.org/2004/07/JG.Services.WCFAuthentication")]
    [System.SerializableAttribute()]
    public partial class AuthenticationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpirationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid TokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Expiration {
            get {
                return this.ExpirationField;
            }
            set {
                if ((this.ExpirationField.Equals(value) != true)) {
                    this.ExpirationField = value;
                    this.RaisePropertyChanged("Expiration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Token {
            get {
                return this.TokenField;
            }
            set {
                if ((this.TokenField.Equals(value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuthenticationService.ITokenAuthentication")]
    public interface ITokenAuthentication {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenAuthentication/GetToken", ReplyAction="http://tempuri.org/ITokenAuthentication/GetTokenResponse")]
        JG.Services.WebAPI.AuthenticationService.AuthenticationResult GetToken();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenAuthentication/GetToken", ReplyAction="http://tempuri.org/ITokenAuthentication/GetTokenResponse")]
        System.Threading.Tasks.Task<JG.Services.WebAPI.AuthenticationService.AuthenticationResult> GetTokenAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenAuthentication/TokenValidate", ReplyAction="http://tempuri.org/ITokenAuthentication/TokenValidateResponse")]
        bool TokenValidate(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenAuthentication/TokenValidate", ReplyAction="http://tempuri.org/ITokenAuthentication/TokenValidateResponse")]
        System.Threading.Tasks.Task<bool> TokenValidateAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITokenAuthenticationChannel : JG.Services.WebAPI.AuthenticationService.ITokenAuthentication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TokenAuthenticationClient : System.ServiceModel.ClientBase<JG.Services.WebAPI.AuthenticationService.ITokenAuthentication>, JG.Services.WebAPI.AuthenticationService.ITokenAuthentication {
        
        public TokenAuthenticationClient() {
        }
        
        public TokenAuthenticationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TokenAuthenticationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TokenAuthenticationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TokenAuthenticationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JG.Services.WebAPI.AuthenticationService.AuthenticationResult GetToken() {
            return base.Channel.GetToken();
        }
        
        public System.Threading.Tasks.Task<JG.Services.WebAPI.AuthenticationService.AuthenticationResult> GetTokenAsync() {
            return base.Channel.GetTokenAsync();
        }
        
        public bool TokenValidate(string token) {
            return base.Channel.TokenValidate(token);
        }
        
        public System.Threading.Tasks.Task<bool> TokenValidateAsync(string token) {
            return base.Channel.TokenValidateAsync(token);
        }
    }
}
